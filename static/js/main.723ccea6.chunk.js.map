{"version":3,"sources":["Components/Countries.jsx","Components/Overlay.jsx","Components/Header.jsx","Components/SearchBar.jsx","Classes/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Countries","props","countries","handler","Fragment","map","item","index","className","key","onClick","src","flag","name","population","region","capital","Overlay","items","subregion","topLevelDomain","currencies","language","Header","changeCss","bool","SearchBar","type","placeholder","onChange","change","changeFilter","disabled","selected","value","Main","setState","overlay","code","languages","displayOverLay","closeOverLay","e","console","log","target","changeRegion","filterRegion","state","filterData","filter","includes","length","data","x","darkLight","searchText","fetch","then","response","json","id","style","this","background","color","display","boo","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.723ccea6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\n\r\n\r\nconst Countries=(props)=>{\r\n  const {countries,handler}=props;\r\n\r\nreturn (\r\n<React.Fragment>\r\n  {countries.map((item,index)=>(\r\n    <div className=\"country\" key={index} onClick={ ()=>handler(item) } >\r\n      <img src={item.flag}/>\r\n      <div className=\"info-text\">\r\n      <h1> {item.name}</h1>\r\n        <p><strong> Population:</strong>  {item.population}</p>\r\n      <p><strong> Region:</strong>  {item.region}</p>\r\n      <p> <strong> Capital:</strong>  {item.capital}</p>\r\n\r\n    </div>\r\n</div>\r\n  ))}\r\n</React.Fragment>\r\n\r\n)\r\n\r\n}\r\n\r\n\r\nexport default Countries\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\nconst Overlay=(props)=>{\r\nconst {item,handler}=props\r\nreturn (\r\n<React.Fragment>\r\n<button onClick={()=>handler()}> back</button>\r\n  {item.map((items,index)=>(\r\n    <div className=\"overlay-wrapper\">\r\n      <div className=\"flag\">\r\n        <img src={items.flag}/>\r\n      </div>\r\n\r\n      <div className=\"info\">\r\n        <h2>{items.name}</h2>\r\n        <p> <strong>Population:</strong>{items.population}</p>\r\n        <p> <strong>Region:</strong> {items.region}</p>\r\n\r\n      <p> <strong>Sub-Region</strong> {items.subregion}</p>\r\n        <p> <strong>Capital </strong>{items.capital}</p>\r\n          <p> <strong>Top Level Domain: </strong>{items.topLevelDomain}</p>\r\n\r\n        <p> <strong>currency </strong>{items.currencies}</p>\r\n          <p> <strong>Language</strong>{items.language}</p>\r\n      </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n  ))}\r\n\r\n\r\n\r\n\r\n\r\n\r\n   </React.Fragment>\r\n)\r\n\r\n\r\n\r\n}\r\nexport default Overlay\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst Header=(props)=>{\r\nreturn (\r\n\r\n<header>\r\n<h2 className=\"header-text\"> Where in the World? </h2>\r\n<button  onClick={props.changeCss}> { props.bool ? \"Light\" : 'Dark' } </button>\r\n\r\n</header>\r\n\r\n)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Header\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nconst SearchBar=(props)=>{\r\nreturn (\r\n  <div className='search'>\r\n<input className=\"searchbar\" type='text' placeholder=\"Search for a Country\" onChange={props.change} />\r\n<select className=\"search-filter\" onChange={props.changeFilter}>\r\n  <option disabled selected >Select your option</option>\r\n<option value='Africa'>Africa</option>\r\n<option value='Americas'>America</option>\r\n<option value='Asia'>Asia</option>\r\n<option value='Europe'>Europe</option>\r\n</select>\r\n</div>\r\n)\r\n\r\n\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport Countries from '../Components/Countries'\r\nimport Overlay from '../Components/Overlay'\r\nimport Header from '../Components/Header'\r\nimport SearchBar from '../Components/SearchBar'\r\n\r\n\r\n\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\nthis.state={\r\ndata:[],\r\noverlay:[],\r\ndisplayOverLay:false,\r\nsearchText:\"\",\r\ndarkLight:false\r\n}\r\n\r\n\r\n}\r\n\r\nasync componentDidMount() {\r\n  fetch('https://restcountries.eu/rest/v2/all')\r\n    .then(response => response.json())\r\n    .then(data => this.setState({ data,filterData:data }));\r\n}\r\n\r\n\r\n\r\nhandler=(item)=>{\r\n  this.setState({\r\n    overlay:[{\r\n        name:item.name,\r\n        population:item.population,\r\n        region:item.region,\r\n        subregion:item.subregion,\r\n        capital:item.capital,\r\n        topLevelDomain:item.topLevelDomain,\r\n        flag:item.flag,\r\n        currencies:item.currencies.code,\r\n        languages:item.languages\r\n      }],\r\n      displayOverLay:true\r\n\r\n})\r\n\r\n}\r\n\r\ncloseOverLay=()=>{\r\n\r\nthis.setState({\r\ndisplayOverLay:false\r\n\r\n})\r\n\r\n}\r\n\r\nchange=(e)=>{\r\nconsole.log(e.target.value)\r\n\r\n\r\n\r\n}\r\n\r\nchangeRegion=(e)=>{\r\n  let filterRegion = this.state.filterData.filter(item => item.region.includes(e.target.value));\r\n  if(filterRegion.length >0){\r\n\r\n  this.setState({\r\n\r\n  data:filterRegion\r\n\r\n  })\r\n  }\r\n\r\n\r\n}\r\n// searchImage=(e)=>{\r\n//   const search = e.target.value;\r\n//   const postsFound=Data.filter(post => post.description.includes(e.target.value))\r\n// if(postsFound.length>0){\r\n//   this.setState({\r\n//     gallery:postsFound\r\n//   })\r\n// }\r\n// }\r\n\r\nchangeFilter=(e)=>{\r\n  console.log(e.target.value)\r\nlet x = this.state.filterData.filter(item => item.region.includes(e.target.value));\r\nif(x.length>0){\r\nthis.setState({\r\n\r\ndata:x\r\n\r\n})\r\n\r\n}\r\n\r\n\r\n}\r\nchangeCss=()=>{\r\n  this.setState({\r\ndarkLight:!this.state.darkLight,\r\n\r\n\r\n\r\n  })\r\n}\r\n\r\n  render() {\r\n\r\nconst style={\r\n  display:'none'\r\n}\r\n\r\nconst dark={\r\n  background:'black',\r\n  color:'#fff'\r\n}\r\n\r\n    return (\r\n      <div id=\"wrapper\" style={this.state.darkLight?{background:'black',color:'#fff'} :{background:'hsl(0, 0%, 98%)'}}  >\r\n      <div className='container'>\r\n      <Header changeCss={this.changeCss} bool={this.state.darkLight}/>\r\n        <SearchBar change={this.changeFilter} changeFilter={this.changeFilter}/>\r\n            <div className='main'style={this.state.displayOverLay ?{display:'none'}  : {color:'block'}}>\r\n\r\n            <Countries countries={this.state.data} handler={this.handler}/>\r\n\r\n            </div>\r\n\r\n<div className=\"over\" style={this.state.displayOverLay ?{display:'block'}  : {color:'none'}}>\r\n        <Overlay item={this.state.overlay}handler={this.closeOverLay} boo={this.state.displayOverLay} />\r\n</div>\r\n      </div>\r\n      </div>\r\n\r\n    )\r\n\r\n }\r\n\r\n\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './Classes/Main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Main/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}